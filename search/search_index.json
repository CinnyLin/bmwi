{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to BMWi Forecasting Tool For full documentation visit mkdocs.org . About the Project This project is a collaboration between German Federal Ministry for Economic Affairs and Energy (BMWi) and Data Science for Social Good Fellowship, UK . The goal of the project is to robustify BMWI\u2019s forecasts by developing a bottom-up forecasting model for predicting economic development in Germany based on regional data. The bottom-up approach focusses The project will draw on fine-grained data on the demographic, economic and sectoral structure of regions with the aim of improving economic forecasts during times of shocks. About the Tool Getting Started There are multiple aspects to be explored with this tool. Head over to this page to get started with the tool. Note: If you wish to get the predictions immediately, you can download them here .","title":"First-Time Users"},{"location":"#welcome-to-bmwi-forecasting-tool","text":"For full documentation visit mkdocs.org .","title":"Welcome to BMWi Forecasting Tool"},{"location":"#about-the-project","text":"This project is a collaboration between German Federal Ministry for Economic Affairs and Energy (BMWi) and Data Science for Social Good Fellowship, UK . The goal of the project is to robustify BMWI\u2019s forecasts by developing a bottom-up forecasting model for predicting economic development in Germany based on regional data. The bottom-up approach focusses The project will draw on fine-grained data on the demographic, economic and sectoral structure of regions with the aim of improving economic forecasts during times of shocks.","title":"About the Project"},{"location":"#about-the-tool","text":"","title":"About the Tool"},{"location":"#getting-started","text":"There are multiple aspects to be explored with this tool. Head over to this page to get started with the tool. Note: If you wish to get the predictions immediately, you can download them here .","title":"Getting Started"},{"location":"installation/","text":"Technical Documentation This section is for people who might want to edit the code base of the application. The repository with all the code can be found here . The application is built using the following tools and frameworks: Python Streamlit Pandas Statsmodels Keras To make edits to the tool, one must know how to work with the aforementioned frameworks. More details about each of them can be found on the links provided above. About Streamlit This application is built using Streamlit , a Python framework to build interactive web applications. It has a rich API for various interactive features which can be learnt more about here . It's a relatively new framework and its recommended to explore building basic apps with it before diving deep into the repository. To set up the repository on your local machine follow the installation steps below: Installation To set up the application on your local machine, follow these steps. Clone the repository on your local machine git clone link Create a virtual environment For MacOS/Linux python3 -m venv env For Windows py -m venv env The second argument is the location to create the virtual environment. Generally, you can just create this in your project and call it env . Read more about virtual env here . Note: You should exclude your virtual environment directory from your version control system using .gitignore or similar. Activate the virtual environment For MacOS/Linux source env/bin/activate For Windows .\\env\\Scripts\\activate Install requirements pip install -r requirements.txt Run the streamlit app streamlit run app.py Code Walkthrough Page by page walkthrough of the functions being used in the application.","title":"Installation and Setup"},{"location":"installation/#technical-documentation","text":"This section is for people who might want to edit the code base of the application. The repository with all the code can be found here . The application is built using the following tools and frameworks: Python Streamlit Pandas Statsmodels Keras To make edits to the tool, one must know how to work with the aforementioned frameworks. More details about each of them can be found on the links provided above.","title":"Technical Documentation"},{"location":"installation/#about-streamlit","text":"This application is built using Streamlit , a Python framework to build interactive web applications. It has a rich API for various interactive features which can be learnt more about here . It's a relatively new framework and its recommended to explore building basic apps with it before diving deep into the repository. To set up the repository on your local machine follow the installation steps below:","title":"About Streamlit"},{"location":"installation/#installation","text":"To set up the application on your local machine, follow these steps. Clone the repository on your local machine git clone link Create a virtual environment For MacOS/Linux python3 -m venv env For Windows py -m venv env The second argument is the location to create the virtual environment. Generally, you can just create this in your project and call it env . Read more about virtual env here . Note: You should exclude your virtual environment directory from your version control system using .gitignore or similar. Activate the virtual environment For MacOS/Linux source env/bin/activate For Windows .\\env\\Scripts\\activate Install requirements pip install -r requirements.txt Run the streamlit app streamlit run app.py","title":"Installation"},{"location":"installation/#code-walkthrough","text":"Page by page walkthrough of the functions being used in the application.","title":"Code Walkthrough"},{"location":"quick/","text":"Quick Access Welcome to the BMWi tool documentation. This is a tool developed to forecast the Kreis level unemployment rate for the next quarter as well as perform various analyses like the prediction error analysis or Kreis vulnerability detection using structural data. There are different things you can explore depending on the use case. The common ones are mentioned below: If you want the latest unemployment rate predictions, then you can visit this page . If you want understand the step-by-step procedure to get fresh predictions, head to the Step-By-Step Guide . To set up the tool on your local machine, follow the installation guide . If you want to check out the techincal documentation and understand the prediction functions, visit the techical documentation page. If you want to get more details about the data cleaning, analysis and the machine learning models that we built, head over to our journey section. To know more about the team which developed this application, check out the Team Page . Add a download link here","title":"Quick Access"},{"location":"quick/#quick-access","text":"Welcome to the BMWi tool documentation. This is a tool developed to forecast the Kreis level unemployment rate for the next quarter as well as perform various analyses like the prediction error analysis or Kreis vulnerability detection using structural data. There are different things you can explore depending on the use case. The common ones are mentioned below: If you want the latest unemployment rate predictions, then you can visit this page . If you want understand the step-by-step procedure to get fresh predictions, head to the Step-By-Step Guide . To set up the tool on your local machine, follow the installation guide . If you want to check out the techincal documentation and understand the prediction functions, visit the techical documentation page. If you want to get more details about the data cleaning, analysis and the machine learning models that we built, head over to our journey section. To know more about the team which developed this application, check out the Team Page . Add a download link here","title":"Quick Access"},{"location":"about/licenses/","text":"","title":"Licences"},{"location":"about/team/","text":"Meet the Team This project has been completed in collaboration with Data Science for Social Good Summer Fellowship. The fellows undertaking this project are: Amit Sasson Cinny Lin Prakhar Rathi Vighnesh N. Ganesh Amit Sasson Cinny Lin Prakhar Rathi Vighnesh Natarajan Ganesh The mentors for this project are: Doschmund Jeyaraj-Kwiatkowski Yurii Tolochko","title":"Team"},{"location":"about/team/#meet-the-team","text":"This project has been completed in collaboration with Data Science for Social Good Summer Fellowship. The fellows undertaking this project are: Amit Sasson Cinny Lin Prakhar Rathi Vighnesh N. Ganesh Amit Sasson Cinny Lin Prakhar Rathi Vighnesh Natarajan Ganesh The mentors for this project are: Doschmund Jeyaraj-Kwiatkowski Yurii Tolochko","title":"Meet the Team"},{"location":"about/tool/","text":"","title":"Tool"},{"location":"journey/causal_inf/","text":"","title":"Causal Inference"},{"location":"journey/clusters/","text":"","title":"Clusters"},{"location":"journey/models/","text":"Model Descriptions This section talks about the various models that we have built and tested. It documents the various models which worked well and also the models which did not work well. Vector Autoregression References","title":"Models"},{"location":"journey/models/#model-descriptions","text":"This section talks about the various models that we have built and tested. It documents the various models which worked well and also the models which did not work well.","title":"Model Descriptions"},{"location":"journey/models/#vector-autoregression","text":"","title":"Vector Autoregression"},{"location":"journey/models/#references","text":"","title":"References"},{"location":"steps/data_prep/","text":"","title":"Data Prep page"},{"location":"steps/error/","text":"Error Analysis Page Identify the kreis that are hard to get predictions for. The error analysis page uses the errors generated from the latest predictions and compares them with the structural data so that you can idenitfy which Kreis are harder to predict unemployment for and see what is different in those Kreis as opposed to the other Kreis. Note: The errors calculated for the previous quarter based on the recently uploaded data and, hence, this is a retrospective analysis. One can identify which kreis were harder to predict for in the previous quarter. Launching the page To open the error analysis page, select the 'Error Analysis` Section from the dropdown on the left as can be viewed in the image below. There are a variety of different plots that can be explored and have been explained in detail below. Map Visualisation This is the first step of visualisation that one can view. Select the checkbox Visualize error on a map? . This will toggle open the following section. Here, you will see the average option selected by default. This will make a map with the average value of errors. This average is calculated over all the dates of the predictions. On clicking on the dropdown and selecting a specific date, the errors for that date will be plotted as seen below. Error Plots by Bundesland This section allows for a kreis-level or bundesland-level analysis. The left dropdown allows selection by Kreis or by Bundesland and the right dropdown allows selection of all or a particular region. Selecting all displays every kreis or bundesland in the same graph. Selecting an individual entry would plot the errors for a specific kreis or bundesland. The individual entries can be selected from the right dropdown option. Kreis Level Overview The goal of the application is to break down the predictions as well as the errors at the Kreis level. The following section performs error data analysis. It helps in understanding which Kreis are the hardest to estimate for unemployment rate. This dataframe currently shows 5 kreis based on their unemployment rate forecasting errors for previous quarter. There are two configuration options here: - Highest or Lowest : This lets you select the Kreis with the highest or lowest unemployment rate prediction errors in the previous quarter. - Value Slider : This lets you select the number of Kreis to be displayed currently. From UI perspective, the maximum limit is 20 To view all the Kreis, download the complete error table by clicking on the option Download the full error table . Structural Data Analysis The next step is to analyze the errors with regards to the structural data and see hot the errors vary with a particular structural variable. Select a structural variable to compare against the errors. ( Eg: Errors are compared against eligible_area in this image ). The errors are on the x-axis so the fatter the curve is the more prone that category is to errors. In the following example, the areas where eligible_area is 0 are less prone to prediction errors than areas with code 1. Future: Later, we can add a check to see if the variable is a categorical or numerical variable. Most important Structural Variables Write a bit about this method a bit more","title":"Error Analysis page"},{"location":"steps/error/#error-analysis-page","text":"Identify the kreis that are hard to get predictions for. The error analysis page uses the errors generated from the latest predictions and compares them with the structural data so that you can idenitfy which Kreis are harder to predict unemployment for and see what is different in those Kreis as opposed to the other Kreis. Note: The errors calculated for the previous quarter based on the recently uploaded data and, hence, this is a retrospective analysis. One can identify which kreis were harder to predict for in the previous quarter.","title":"Error Analysis Page"},{"location":"steps/error/#launching-the-page","text":"To open the error analysis page, select the 'Error Analysis` Section from the dropdown on the left as can be viewed in the image below. There are a variety of different plots that can be explored and have been explained in detail below.","title":"Launching the page"},{"location":"steps/error/#map-visualisation","text":"This is the first step of visualisation that one can view. Select the checkbox Visualize error on a map? . This will toggle open the following section. Here, you will see the average option selected by default. This will make a map with the average value of errors. This average is calculated over all the dates of the predictions. On clicking on the dropdown and selecting a specific date, the errors for that date will be plotted as seen below.","title":"Map Visualisation"},{"location":"steps/error/#error-plots-by-bundesland","text":"This section allows for a kreis-level or bundesland-level analysis. The left dropdown allows selection by Kreis or by Bundesland and the right dropdown allows selection of all or a particular region. Selecting all displays every kreis or bundesland in the same graph. Selecting an individual entry would plot the errors for a specific kreis or bundesland. The individual entries can be selected from the right dropdown option.","title":"Error Plots by Bundesland"},{"location":"steps/error/#kreis-level-overview","text":"The goal of the application is to break down the predictions as well as the errors at the Kreis level. The following section performs error data analysis. It helps in understanding which Kreis are the hardest to estimate for unemployment rate. This dataframe currently shows 5 kreis based on their unemployment rate forecasting errors for previous quarter. There are two configuration options here: - Highest or Lowest : This lets you select the Kreis with the highest or lowest unemployment rate prediction errors in the previous quarter. - Value Slider : This lets you select the number of Kreis to be displayed currently. From UI perspective, the maximum limit is 20 To view all the Kreis, download the complete error table by clicking on the option Download the full error table .","title":"Kreis Level Overview"},{"location":"steps/error/#structural-data-analysis","text":"The next step is to analyze the errors with regards to the structural data and see hot the errors vary with a particular structural variable. Select a structural variable to compare against the errors. ( Eg: Errors are compared against eligible_area in this image ). The errors are on the x-axis so the fatter the curve is the more prone that category is to errors. In the following example, the areas where eligible_area is 0 are less prone to prediction errors than areas with code 1. Future: Later, we can add a check to see if the variable is a categorical or numerical variable.","title":"Structural Data Analysis"},{"location":"steps/error/#most-important-structural-variables","text":"Write a bit about this method a bit more","title":"Most important Structural Variables"},{"location":"steps/home/","text":"Home Page: Unemployment Rate Ranking The home page allows you to get quick takeaways based on the latest prediction results. The main feature of this page is to quickly see which kreis (or which group of kreise) are expected to have the highest unemployment rate for the next quarter. Kreise Ranking The first section is kreise ranking, containing three elements: Slide bar The slide bar allows you to see the top N kreise with the highest unemployment rates. It is set in a range from 10 to 100, in increments of 10. The default is set at 10. The screenshot sample is set at 30, meaning that it would show a dataframe with the top 30 highest unemployment rates. Sort-by Columns This is a multi-selection input field where you can choose multiple columns you want to sort the kreise ranking by. The ranking would then be sorted based on your input selections. The default is set to sort by three columns, in the order of: this quarter ( yyyy-mm-dd ), last quarter ( last_time% ), and the same quarter last year ( last_year% ). It is important to note that the order of your input selection matters: The input order means that it would first sort by the first input column, and then sort by the second input column if two kreis has the same result for the first input column. The input order also means that the top N kreis filtering is based on the first input column. Using the default selections as an example, the filtered result is the top N kreis based on unemployment rates of this quarter. However, the top N kreis last quarter may be a different 10 kreise. In order to get those top N kreise, you would have to put \"last quarter\" as the first sorting column in the input field. ^ Does this make sense? The available sort by options are: metedata index: state ( bundesland ) and county ( kreis ) all the input dates ( yyyy-mm-dd ) derived calculations: last quarter ( last_time% ): (this_Q - last_Q) / (this_Q) * 100 last year ( last_year% ): (this_Q - this_Q_last_year) / (this_Q) * 100 For example, the screenshot sample is set at the three default columns: this quarter ( 2020-03-31 ), last quarter ( last_time% ), and the same quarter last year ( last_year% ). Results After setting the number of top kreise you want to see and the columns you want to sort by, you are presented with the dataframe output of your choosing. This dataframe currently shows the top 30 kreis based on their unemployment rate this quarter, and also showing percentage change comparision to last quarter and last year, because they were in the input fields. Pro Tip : Click on a column to sort by the column. Click again to switch between ascending and descending sorting. The arrow circled in red next to the column means that the dataframe is currently sorted by that column. The arrow facing downwards means that the column is sorted in descending order. Note that even when the dataframe is sorted by the column you click, the top results is still filtered from the full dataframe based on the first input column. ^ Does this make sense? This dataframe currently shows the top 30 kreis based on their unemployment rate this quarter, and is also sorted by the percentage change compared to last year. For example, even though the dataframe is currently sorted by last_year% when we clicked on it, it is not sorting the top 30 kreis of last_year% based on the full dataset, but sorting based on the top 30 kreis of this quarter. Should I add a map highlighting the selected top kreis with annotations, and also colored by the first sorted column. Bundesland / Group Ranking The second section is bundesland / group ranking, containing five elements, following a similar format to the previous section: Slide-bar The slide bar allows you to see the top N kreise with the highest unemployment rates. It is set in a range from 50 to 200, in increments of 10. The default is set at 50. Compared to the previous section, the slide bar range is slightly larger because the reuslts in this section is grouped. Sort-by Columns Similar to the last section, the ranking would then be sorted based on your input column. Different from the last section, this section only allows you to sort by one column for simplicity. Group-by columns This multi-selection box offers a range of categorical variables to group by. The options include: growth_shrink_cities (\"wachsende/schrumpfende Kreise\") east_west (\"West-/Ostdeutschland\") labor_market_type (\"IAB-Arbeitsmarkttyp der Arbeitsagentur\") settlement_type_of_labor_market_region (\"Siedlungsstrukturtyp der Arbeitsmarktregion\") district_settlement_structure (\"Siedlungsstruktureller Kreistyp\") type_of_settlement_structure (\"Siedlungsstruktureller Regionstyp\") urban_rural (\"St\u00e4dtischer Raum / L\u00e4ndlicher Raum\") metropolitan_region (\"Europ\u00e4ische Metropolregion\") state-level (\" ags2 \" / \" bundesland \") ^ Are there other groupings that could be useful that are currently not included? Need to add GRW eligible for funding category column. The default is set to group by both growth_shrink_cities and east_west . Results The filtering result is a multi-index dataframe with three columns. The multi-index is presented based on how many columns you group by. The three columns include: {sort_by_column} : the column to sort by in the filtering dataframe. The default is set to sort by its percentage change compared to last_year% . #kreis : the number of kreise in that grouping. %count : the proportion of kreise belonging to that sorted grouping. ^ Change column name \"kreis\" to \"#kreis\" For example, this sample dataframe shows the top 50 kreise, sorted by last_year% , grouped by growth_shrink_cities and east_west . Reading the first row: the first column, `last_year%`, means that in the top 50 kreise with highest percentage change in unemployment rate compared to last year, `22` of them belong to growing cities in west Germany. the second column, `#kreis` means that there is a total of `163` (out of all 401) kreise that are growing cities in west Germany. the third column, `%counts`, means that 22 kreise accounts for `13.5%` of all the kreise in the growing-cities-West-Germany group. The #kreis and %counts are reference indicators to help contextualize the counts in the first column. For example, looking at the first column alone, it seems that growing-cities-West-Germany has the most number of kreise in the top 50 to have high unemployment changes since last year. However, when looking at the third column, we see that growing-above-average-West-Germany is actually the group with the highest percentage of kreise than other group to have the high unemployment changes in a year. Also note the number of multi-indices shown in the example. Since growth_shrink_cities have five categories, and east_west has two categories, there should be a total of 10 category groups in the index rows. However, the reason why not all combinations are shown is because some categories do not have kreise in it. Sometimes, it could be useful to see what category groups are not in the top lists. Visualizations Visualize the dataframe output results. As explained in the tip, when grouping by multiple columns, resulting a large number of combinations, it may be hard to see the results clearly using the pie chart or bar chart. Pie Chart The pie chart visualizes the {sort_by_column} into proportions. As shown above, the sample pie chart visualizes the percentage each category group takes in total from the last_year% column. For example, growing-cities-West-Germany group accounts for 22 out of the total of 50 top kreise, therefore, it takes up 44% as shown in the pie chart. Bar Chart As explained earlier, the pie chart could be a biased understanding of the category groups, and that can be balanced by understanding the percentage of those kreis accounting for the whole category group. The bar chart visualizes the %counts column, and draws a horizontal line on the 50% mark. As shown above, the sample bar chart visualizes the percentage the top 50 kreise took up for its whole category group. Note that you could use the two arrows on the top right to expand the plot if the display is too small on your screen. ^ Also add this as a pro tip on the tool page ^ Are there other things that should be added on the home page for quick access?","title":"Home page"},{"location":"steps/home/#home-page-unemployment-rate-ranking","text":"The home page allows you to get quick takeaways based on the latest prediction results. The main feature of this page is to quickly see which kreis (or which group of kreise) are expected to have the highest unemployment rate for the next quarter.","title":"Home Page: Unemployment Rate Ranking"},{"location":"steps/home/#kreise-ranking","text":"The first section is kreise ranking, containing three elements:","title":"Kreise Ranking"},{"location":"steps/home/#slide-bar","text":"The slide bar allows you to see the top N kreise with the highest unemployment rates. It is set in a range from 10 to 100, in increments of 10. The default is set at 10. The screenshot sample is set at 30, meaning that it would show a dataframe with the top 30 highest unemployment rates.","title":"Slide bar"},{"location":"steps/home/#sort-by-columns","text":"This is a multi-selection input field where you can choose multiple columns you want to sort the kreise ranking by. The ranking would then be sorted based on your input selections. The default is set to sort by three columns, in the order of: this quarter ( yyyy-mm-dd ), last quarter ( last_time% ), and the same quarter last year ( last_year% ). It is important to note that the order of your input selection matters: The input order means that it would first sort by the first input column, and then sort by the second input column if two kreis has the same result for the first input column. The input order also means that the top N kreis filtering is based on the first input column. Using the default selections as an example, the filtered result is the top N kreis based on unemployment rates of this quarter. However, the top N kreis last quarter may be a different 10 kreise. In order to get those top N kreise, you would have to put \"last quarter\" as the first sorting column in the input field. ^ Does this make sense? The available sort by options are: metedata index: state ( bundesland ) and county ( kreis ) all the input dates ( yyyy-mm-dd ) derived calculations: last quarter ( last_time% ): (this_Q - last_Q) / (this_Q) * 100 last year ( last_year% ): (this_Q - this_Q_last_year) / (this_Q) * 100 For example, the screenshot sample is set at the three default columns: this quarter ( 2020-03-31 ), last quarter ( last_time% ), and the same quarter last year ( last_year% ).","title":"Sort-by Columns"},{"location":"steps/home/#results","text":"After setting the number of top kreise you want to see and the columns you want to sort by, you are presented with the dataframe output of your choosing. This dataframe currently shows the top 30 kreis based on their unemployment rate this quarter, and also showing percentage change comparision to last quarter and last year, because they were in the input fields. Pro Tip : Click on a column to sort by the column. Click again to switch between ascending and descending sorting. The arrow circled in red next to the column means that the dataframe is currently sorted by that column. The arrow facing downwards means that the column is sorted in descending order. Note that even when the dataframe is sorted by the column you click, the top results is still filtered from the full dataframe based on the first input column. ^ Does this make sense? This dataframe currently shows the top 30 kreis based on their unemployment rate this quarter, and is also sorted by the percentage change compared to last year. For example, even though the dataframe is currently sorted by last_year% when we clicked on it, it is not sorting the top 30 kreis of last_year% based on the full dataset, but sorting based on the top 30 kreis of this quarter. Should I add a map highlighting the selected top kreis with annotations, and also colored by the first sorted column.","title":"Results"},{"location":"steps/home/#bundesland-group-ranking","text":"The second section is bundesland / group ranking, containing five elements, following a similar format to the previous section:","title":"Bundesland / Group Ranking"},{"location":"steps/home/#slide-bar_1","text":"The slide bar allows you to see the top N kreise with the highest unemployment rates. It is set in a range from 50 to 200, in increments of 10. The default is set at 50. Compared to the previous section, the slide bar range is slightly larger because the reuslts in this section is grouped.","title":"Slide-bar"},{"location":"steps/home/#sort-by-columns_1","text":"Similar to the last section, the ranking would then be sorted based on your input column. Different from the last section, this section only allows you to sort by one column for simplicity.","title":"Sort-by Columns"},{"location":"steps/home/#group-by-columns","text":"This multi-selection box offers a range of categorical variables to group by. The options include: growth_shrink_cities (\"wachsende/schrumpfende Kreise\") east_west (\"West-/Ostdeutschland\") labor_market_type (\"IAB-Arbeitsmarkttyp der Arbeitsagentur\") settlement_type_of_labor_market_region (\"Siedlungsstrukturtyp der Arbeitsmarktregion\") district_settlement_structure (\"Siedlungsstruktureller Kreistyp\") type_of_settlement_structure (\"Siedlungsstruktureller Regionstyp\") urban_rural (\"St\u00e4dtischer Raum / L\u00e4ndlicher Raum\") metropolitan_region (\"Europ\u00e4ische Metropolregion\") state-level (\" ags2 \" / \" bundesland \") ^ Are there other groupings that could be useful that are currently not included? Need to add GRW eligible for funding category column. The default is set to group by both growth_shrink_cities and east_west .","title":"Group-by columns"},{"location":"steps/home/#results_1","text":"The filtering result is a multi-index dataframe with three columns. The multi-index is presented based on how many columns you group by. The three columns include: {sort_by_column} : the column to sort by in the filtering dataframe. The default is set to sort by its percentage change compared to last_year% . #kreis : the number of kreise in that grouping. %count : the proportion of kreise belonging to that sorted grouping. ^ Change column name \"kreis\" to \"#kreis\" For example, this sample dataframe shows the top 50 kreise, sorted by last_year% , grouped by growth_shrink_cities and east_west . Reading the first row: the first column, `last_year%`, means that in the top 50 kreise with highest percentage change in unemployment rate compared to last year, `22` of them belong to growing cities in west Germany. the second column, `#kreis` means that there is a total of `163` (out of all 401) kreise that are growing cities in west Germany. the third column, `%counts`, means that 22 kreise accounts for `13.5%` of all the kreise in the growing-cities-West-Germany group. The #kreis and %counts are reference indicators to help contextualize the counts in the first column. For example, looking at the first column alone, it seems that growing-cities-West-Germany has the most number of kreise in the top 50 to have high unemployment changes since last year. However, when looking at the third column, we see that growing-above-average-West-Germany is actually the group with the highest percentage of kreise than other group to have the high unemployment changes in a year. Also note the number of multi-indices shown in the example. Since growth_shrink_cities have five categories, and east_west has two categories, there should be a total of 10 category groups in the index rows. However, the reason why not all combinations are shown is because some categories do not have kreise in it. Sometimes, it could be useful to see what category groups are not in the top lists.","title":"Results"},{"location":"steps/home/#visualizations","text":"Visualize the dataframe output results. As explained in the tip, when grouping by multiple columns, resulting a large number of combinations, it may be hard to see the results clearly using the pie chart or bar chart.","title":"Visualizations"},{"location":"steps/home/#pie-chart","text":"The pie chart visualizes the {sort_by_column} into proportions. As shown above, the sample pie chart visualizes the percentage each category group takes in total from the last_year% column. For example, growing-cities-West-Germany group accounts for 22 out of the total of 50 top kreise, therefore, it takes up 44% as shown in the pie chart.","title":"Pie Chart"},{"location":"steps/home/#bar-chart","text":"As explained earlier, the pie chart could be a biased understanding of the category groups, and that can be balanced by understanding the percentage of those kreis accounting for the whole category group. The bar chart visualizes the %counts column, and draws a horizontal line on the 50% mark. As shown above, the sample bar chart visualizes the percentage the top 50 kreise took up for its whole category group. Note that you could use the two arrows on the top right to expand the plot if the display is too small on your screen. ^ Also add this as a pro tip on the tool page ^ Are there other things that should be added on the home page for quick access?","title":"Bar Chart"},{"location":"steps/model/","text":"","title":"Model page"}]}